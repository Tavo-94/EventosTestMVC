// <auto-generated />
using System;
using EventosTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventosTestMVC.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventSupply", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SuppliesId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "SuppliesId");

                    b.HasIndex("SuppliesId");

                    b.ToTable("EventSupply");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTag");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventsId", "UsersEmail");

                    b.HasIndex("UsersEmail");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("EventosTestMVC.Models.AvatarPlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AvatarPlanners");
                });

            modelBuilder.Entity("EventosTestMVC.Models.AvatarUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AvatarUsers");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListaCosas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlannerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VestimentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlannerEmail");

                    b.HasIndex("VestimentaId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventosTestMVC.Models.EventToUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserEmail");

                    b.ToTable("EventsToUsers");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Planner", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AvatarPlannerId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.HasIndex("AvatarPlannerId");

                    b.ToTable("Planners");
                });

            modelBuilder.Entity("EventosTestMVC.Models.PlannerComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlannerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlannerEmail");

                    b.ToTable("PlannerComments");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EventosTestMVC.Models.TagsToEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TagId");

                    b.ToTable("TagsToEvents");
                });

            modelBuilder.Entity("EventosTestMVC.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AvatarUserId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.HasIndex("AvatarUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventosTestMVC.Models.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserEmail");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Vestimenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vestimenta");
                });

            modelBuilder.Entity("EventSupply", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosTestMVC.Models.Supply", null)
                        .WithMany()
                        .HasForeignKey("SuppliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosTestMVC.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosTestMVC.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventosTestMVC.Models.Event", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Planner", "Planner")
                        .WithMany("Events")
                        .HasForeignKey("PlannerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosTestMVC.Models.Vestimenta", "Vestimenta")
                        .WithMany()
                        .HasForeignKey("VestimentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planner");

                    b.Navigation("Vestimenta");
                });

            modelBuilder.Entity("EventosTestMVC.Models.EventToUsers", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", "Event")
                        .WithMany("EventToUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosTestMVC.Models.User", "User")
                        .WithMany("EventToUsers")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Planner", b =>
                {
                    b.HasOne("EventosTestMVC.Models.AvatarPlanner", "AvatarPlanner")
                        .WithMany("Planners")
                        .HasForeignKey("AvatarPlannerId");

                    b.Navigation("AvatarPlanner");
                });

            modelBuilder.Entity("EventosTestMVC.Models.PlannerComment", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", "Event")
                        .WithMany("PlannerComments")
                        .HasForeignKey("EventId");

                    b.HasOne("EventosTestMVC.Models.Planner", "Planner")
                        .WithMany("PlannerComments")
                        .HasForeignKey("PlannerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Planner");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Supply", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Category", "Category")
                        .WithMany("Supplies")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EventosTestMVC.Models.TagsToEvent", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", "Event")
                        .WithMany("TagEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosTestMVC.Models.Tag", "Tag")
                        .WithMany("TagEvents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EventosTestMVC.Models.User", b =>
                {
                    b.HasOne("EventosTestMVC.Models.AvatarUser", "AvatarUser")
                        .WithMany("Users")
                        .HasForeignKey("AvatarUserId");

                    b.Navigation("AvatarUser");
                });

            modelBuilder.Entity("EventosTestMVC.Models.UserComment", b =>
                {
                    b.HasOne("EventosTestMVC.Models.Event", "Event")
                        .WithMany("UserComments")
                        .HasForeignKey("EventId");

                    b.HasOne("EventosTestMVC.Models.User", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventosTestMVC.Models.AvatarPlanner", b =>
                {
                    b.Navigation("Planners");
                });

            modelBuilder.Entity("EventosTestMVC.Models.AvatarUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Category", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Event", b =>
                {
                    b.Navigation("EventToUsers");

                    b.Navigation("PlannerComments");

                    b.Navigation("TagEvents");

                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Planner", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("PlannerComments");
                });

            modelBuilder.Entity("EventosTestMVC.Models.Tag", b =>
                {
                    b.Navigation("TagEvents");
                });

            modelBuilder.Entity("EventosTestMVC.Models.User", b =>
                {
                    b.Navigation("EventToUsers");

                    b.Navigation("UserComments");
                });
#pragma warning restore 612, 618
        }
    }
}
